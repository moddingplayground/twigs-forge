/* Setup */

buildscript {
  repositories {
    maven { url 'https://maven.minecraftforge.net/' }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
  }

  dependencies {
    classpath (group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true) { exclude group: 'org.apache.logging.log4j' }
    classpath 'org.apache.logging.log4j:log4j-api:2.11.2'
    classpath 'org.apache.logging.log4j:log4j-core:2.11.2'

    classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    classpath group: 'org.kohsuke',       name: 'github-api',  version: '1.301'
  }
}

plugins {
  id 'java'
  id 'com.modrinth.minotaur'          version '2.0.2'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

java { toolchain.languageVersion = JavaLanguageVersion.of(17) }

/* Setup Variables */

def ENV = System.getenv()

String ver = "${project.version_id}+${project.major_version}-forge"
version = ENV.GITHUB_ACTIONS ? "${ver}.build.${ENV.GITHUB_RUN_NUMBER}" : ver

archivesBaseName = project.mod_id
group = project.maven_group

/* Dependencies */

dependencies {
  minecraft "net.minecraftforge:forge:${project.ver_minecraft}-${project.ver_forge}"
  annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

/* Runs */

minecraft {
  mappings channel: 'official', version: project.ver_minecraft

  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  runs {
    client {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'info'
      arg "-mixin.config=${project.mod_id}.mixins.json"

      mods { twigs { source sourceSets.main } }
    }

    server {
      workingDirectory project.file('run')

      property 'forge.logging.markers', 'REGISTRIES'

      property 'forge.logging.console.level', 'info'
      arg "-mixin.config=${project.mod_id}.mixins.json"

      mods { twigs { source sourceSets.main } }
    }
  }
}

/* Jar */

jar {
  manifest {
    attributes([
            "Specification-Title"      : "${project.mod_name}",
            "Specification-Vendor"     : "${project.mod_author}",
            "Specification-Version"    : "1",
            "Implementation-Title"     : project.name,
            "Implementation-Version"   : project.jar.archiveVersion,
            "Implementation-Vendor"    : "${project.mod_author}",
            "Implementation-Timestamp" : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"             : "${project.mod_id}.mixins.json"
    ])
  }
}

jar.finalizedBy('reobfJar')

mixin { add sourceSets.main, "${project.mod_id}.refmap.json" }

/* Releasing */

def VER_NAME = "[$project.major_version] $project.mod_name $project.version_id"
def CHANGELOG = new File("./gradle", "CHANGELOG.md").text
def SUPPORTED_VERSIONS = Arrays.asList(project.supported_versions.split(','))

import org.kohsuke.github.*
task github(dependsOn: build) {
  onlyIf { ENV.GITHUB_TOKEN }
  doLast {
    def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN)
    def repository = github.getRepository(project.github_repository)

    def builder = new GHReleaseBuilder(repository, version)
    builder.name(VER_NAME)
    builder.body(CHANGELOG)
    builder.commitish(project.github_branch)
    builder.prerelease(project.release_type != 'release')
    builder.create().uploadAsset(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
  }
}

if (ENV.MODRINTH_TOKEN) modrinth {
  token = ENV.MODRINTH_TOKEN
  projectId = project.modrinth_id
  versionNumber = version
  versionName = VER_NAME
  versionType = project.release_type
  changelog = CHANGELOG
  uploadFile = jar
  gameVersions = SUPPORTED_VERSIONS
}

if (ENV.CURSEFORGE_API_KEY) curseforge {
  apiKey = ENV.CURSEFORGE_API_KEY

  project {
    id = project.curseforge_id
    addGameVersion 'Forge'
    for (final def cf_ver in SUPPORTED_VERSIONS) addGameVersion cf_ver

    changelog = CHANGELOG
    releaseType = project.release_type

    mainArtifact(jar) { displayName = VER_NAME }

    afterEvaluate { uploadTask.dependsOn(jar) }
  }

  options { forgeGradleIntegration = false }
}

task releaseVersion(dependsOn: [ build, 'github', 'modrinth', 'curseforge' ])
